{
  "root": true,
  "compilerOptions": {
    "target": "ES5" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "moduleResolution": "node",
    "jsx": "react",
    "esModuleInterop": true,
    "downlevelIteration": true,
    "sourceMap": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
      "encodeHooks": ["./packages/hooks/src/index.ts"],
      "encode-hooks": ["./packages/hooks/src/index.ts"],
      "encodeHooks/lib/*": ["./packages/hooks/src/*"],
      "encode-hooks/lib/*": ["./packages/hooks/src/*"]
    },
    "allowSyntheticDefaultImports": true,
    "skipLibCheck": true,
    "strictNullChecks": true,
    "importHelpers": true
  },
  "exclude": ["node_modules", "lib", "es", "dist", "example"]
}

// {
//   "compilerOptions": {
//     /* 项目配置 */
//     // "incremental": true,                             /* 保存 .tsbuildinfo 文件以允许增量编译项目。 */
//     // "composite": true,                               /* 启用用于 TypeScript 项目的项目引用的约束。 */
//     // "tsBuildInfoFile": "./.tsbuildinfo",             /* 指定 .tsbuildinfo 增量编译文件的路径。 */
//     // "disableSourceOfProjectReferenceRedirect": true, /* 在引用复合项目时禁用首选源文件而不是声明文件。 */
//     // "disableSolutionSearching": true,                /* 当编辑时，排除多项目引用检查的项目。 */
//     // "disableReferencedProjectLoad": true,            /* 减少 TypeScript 自动加载的项目数量。 */

//     /* 语言和环境 */
//     "target": "es2016",                               /* 设置生成的 JavaScript 的语言版本，并包括兼容的库声明。 */
//     // "lib": [],                                       /* 指定一组捆绑的库声明文件，描述目标运行时环境。 */
//     // "jsx": "preserve",                               /* 指定生成的 JSX 代码的形式。 */
//     // "experimentalDecorators": true,                  /* 启用对实验性装饰器的支持。 */
//     // "emitDecoratorMetadata": true,                   /* 在源文件中发射已装饰声明的设计类型元数据。 */
//     // "jsxFactory": "",                                /* 指定在目标 React JSX 发射时使用的 JSX 工厂函数，例如 'React.createElement' 或 'h'。 */
//     // "jsxFragmentFactory": "",                        /* 指定在目标 React JSX 发射时用于片段的 JSX Fragment 引用，例如 'React.Fragment' 或 'Fragment'。 */
//     // "jsxImportSource": "",                           /* 指定在使用 'jsx: react-jsx*' 时用于导入 JSX 工厂函数的模块说明符。 */
//     // "reactNamespace": "",                            /* 指定在 'createElement' 调用时调用的对象。仅在目标 'react' JSX 发射时适用。 */
//     // "noLib": true,                                   /* 禁用包括任何库文件，包括默认的 lib.d.ts。 */
//     // "useDefineForClassFields": true,                 /* 发射符合 ECMAScript 标准的类字段。 */
//     // "moduleDetection": "auto",                       /* 控制检测模块格式的方法。 */

//     /* 模块 */
//     "module": "commonjs",                              /* 指定生成的模块代码。 */
//     // "rootDir": "./",                                 /* 指定源文件夹的根目录。 */
//     // "moduleResolution": "node10",                    /* 指定 TypeScript 查找给定模块说明符的文件方式。 */
//     // "baseUrl": "./",                                 /* 指定用于解析非相对模块名称的基本目录。 */
//     // "paths": {},                                     /* 指定一组条目，将导入重新映射到附加查找位置。 */
//     // "rootDirs": [],                                  /* 在解析模块时允许将多个文件夹视为一个。 */
//     // "typeRoots": [],                                 /* 指定行为类似于 './node_modules/@types' 的多个文件夹。 */
//     // "types": [],                                     /* 指定要在源文件中引用而不被引用的类型包名称。 */
//     // "allowUmdGlobalAccess": true,                    /* 允许从模块访问 UMD 全局。 */
//     // "moduleSuffixes": [],                            /* 解析模块时要搜索的文件名后缀列表。 */
//     // "allowImportingTsExtensions": true,              /* 允许导入包含 TypeScript 文件扩展名的文件。需要设置 '--moduleResolution bundler' 以及 '--noEmit' 或 '--emitDeclarationOnly'。 */
//     // "resolvePackageJsonExports": true,               /* 解析包导入时使用 package.json 中的 'exports' 字段。 */
//     // "resolvePackageJsonImports": true,               /* 解析导入时使用 package.json 中的 'imports' 字段。 */
//     // "customConditions": [],                          /* 在解析导入时设置的条件，额外添加到解析器特定默认值中。 */
//     // "resolveJsonModule": true,                       /* 启用导入 .json 文件。 */
//     // "allowArbitraryExtensions": true,                /* 启用导入任何扩展名的文件，前提是存在声明文件。 */
//     // "noResolve": true,                               /* 禁止 'import'、'require' 或 '<reference>' 扩展 TypeScript 应该添加到项目中的文件数量。 */

//     /* JavaScript 支持 */
//     // "allowJs": true,                                /* 允许 JavaScript 文件成为程序的一部分。使用 'checkJS' 选项从这些文件中获取错误。 */
//     // "checkJs": true,                                /* 启用对类型检查的 JavaScript 文件的错误报告。 */
//     // "maxNodeModuleJsDepth": 1,                      /* 指定用于检查 'node_modules' 中的 JavaScript 文件的最大文件夹深度。仅适用于 'allowJs'。 */

//     /* 发射 */
//     // "declaration": true,                            /* 从 TypeScript 和 JavaScript 文件中生成 .d.ts 文件。 */
//     // "declarationMap": true,                         /* 为 .d.ts 文件创建 sourcemaps。 */
//     // "emitDeclarationOnly": true,                    /* 仅输出 .d.ts 文件而不输出 JavaScript 文件。 */
//     // "sourceMap": true,                              /* 为生成的 JavaScript 文件创建源映射文件。 */
//     // "inlineSourceMap": true,                        /* 在生成的 JavaScript 内部包含 sourcemap 文件。 */
//     // "outFile": "./",                                /* 指定将所有输出捆绑到一个 JavaScript 文件中。如果 'declaration' 为 true，还指定将所有 .d.ts 输出捆绑到一个文件中。 */
//     // "outDir": "./",                                 /* 指定所有生成文件的输出文件夹。 */
//     // "removeComments": true,                         /* 禁用发射注释。 */
//     // "noEmit": true,                                 /* 禁止从编译中生成文件。 */
//     // "importHelpers": true,                          /* 允许从 tslib 中每个项目中导入一次辅助函数，而不是在每个文件中包含它们。 */
//     // "importsNotUsedAsValues": "remove",            /* 指定仅用于类型的导入的发射/检查行为。 */
//     // "downlevelIteration": true,                    /* 为迭代发射更符合规范的但冗长且性能较差的 JavaScript。 */
//     // "sourceRoot": "",                              /* 指定调试器在查找引用源代码的根路径时应该找到的位置。 */
//     // "mapRoot": "",                                 /* 指定调试器应该在哪里找到 map 文件，而不是生成的位置。 */
//     // "inlineSources": true,                         /* 在生成的 JavaScript 内部包含源代码。 */
//     // "emitBOM": true,                               /* 在输出文件开头发射 UTF-8 字节顺序标记（BOM）。 */
//     // "newLine": "crlf",                             /* 为发射文件设置换行符。 */
//     // "stripInternal": true,                         /* 禁用发射具有 '@internal' 的声明的文件。 */
//     // "noEmitHelpers": true,                         /* 禁用在编译输出中生成自定义辅助函数，如 '__extends'。 */
//     // "noEmitOnError": true,                         /* 如果报告任何类型检查错误，则禁用发射文件。 */
//     // "preserveConstEnums": true,                    /* 禁用在生成的代码中消除 'const enum' 声明。 */
//     // "declarationDir": "./",                        /* 指定生成的声明文件的输出目录。 */
//     // "preserveValueImports": true,                  /* 在 JavaScript 输出中保留未使用的导入的值，否则这些值会被删除。 */

//     /* 互操作约束 */
//     // "isolatedModules": true,                       /* 确保每个文件都可以安全地进行转译，而不依赖于其他导入。 */
//     // "verbatimModuleSyntax": true,                  /* 不要转换或省略未标记为类型的任何导入或导出，确保它们按照输出文件的格式写入。基于 'module' 设置。 */
//     // "allowSyntheticDefaultImports": true,          /* 在一个模块没有默认导出的情况下，允许 'import x from y'。 */
//     "esModuleInterop": true,                         /* 为了支持导入 CommonJS 模块，发射额外的 JavaScript。这启用了 'allowSyntheticDefaultImports' 以支持类型兼容性。 */
//     // "preserveSymlinks": true,                      /* 禁用解析符号链接到它们的真实路径。与 node 中的同名标志相关。 */
//     "forceConsistentCasingInFileNames": true,        /* 确保在导入中大小写正确。 */

//     /* 类型检查 */
//     "strict": true,                                  /* 启用所有严格的类型检查选项。 */
//     // "noImplicitAny": true,                         /* 对具有隐含 'any' 类型的表达式和声明启用错误报告。 */
//     // "strictNullChecks": true,                      /* 在类型检查时考虑 'null' 和 'undefined'。 */
//     // "strictFunctionTypes": true,                   /* 在分配函数时，检查确保参数和返回值是子类型兼容的。 */
//     // "strictBindCallApply": true,                   /* 检查 'bind'、'call' 和 'apply' 方法的参数是否匹配原始函数。 */
//     // "strictPropertyInitialization": true,          /* 检查在构造函数中声明但未在构造函数中设置的类属性。 */
//     // "noImplicitThis": true,                        /* 在 'this' 被赋予 'any' 类型时启用错误报告。 */
//     // "useUnknownInCatchVariables": true,           /* 在 catch 子句中默认将变量类型设置为 'unknown' 而不是 'any'。 */
//     // "alwaysStrict": true,                          /* 确保始终发射 'use strict'。 */
//     // "noUnusedLocals": true,                        /* 启用当局部变量未使用时的错误报告。 */
//     // "noUnusedParameters": true,                    /* 引发错误，当函数参数未使用时。 */
//     // "exactOptionalPropertyTypes": true,            /* 解释可选属性类型时按照写入的形式，而不是添加 'undefined'。 */
//     // "noImplicitReturns": true,                     /* 启用错误报告，对于没有在函数中显式返回的代码路径。 */
//     // "noFallthroughCasesInSwitch": true,            /* 启用错误报告，对于 switch 语句中的贯穿情况。 */
//     // "noUncheckedIndexedAccess": true,              /* 当使用索引访问时，将 'undefined' 添加到类型中。 */
//     // "noImplicitOverride": true,                    /* 确保在派生类中覆盖的成员上标记了 'override' 修饰符。 */
//     // "noPropertyAccessFromIndexSignature": true,    /* 强制使用索引访问器访问使用索引类型声明的键。 */
//     // "allowUnusedLabels": true,                     /* 禁用对未使用标签的错误报告。 */
//     // "allowUnreachableCode": true,                  /* 禁用对不可达代码的错误报告。 */

//     /* 完备性 */
//     // "skipDefaultLibCheck": true,                   /* 跳过 TypeScript 包含的 .d.ts 文件的类型检查。 */
//     "skipLibCheck": true                             /* 跳过类型检查所有 .d.ts 文件。 */
//   }
// }
